Lesson 1: How to start thinking in efficient CS?
So the "lessons" for teachers/advanced people are going to be less structured than the student lessons.
	Why?
Because you guys already know how to CS, so I want you guys to practice a lot and discuss techniques with each other.

I will generally post a link to a problem set and tell you which ones to do.
You could work in small teams if you're not too loud.
You're free to do all the questions, but you kinda have to do the ones I "assign" first because those are the ones we're going to be going over and discussing.
Please don't cheat or whatever because: what do you gain? Saying this is cliche, but you're honestly just cheating yourself (of learnination)

Today we're not doing a problem set.
Do this (which is from student lesson 6 I think)

!!olist!!
Define reg_fib(n),  a function that returns a list containing the fibonacci sequence of size n when the first 2 numbers are 0 and 1
Define print_fib(l, n), which is the same as fib(l, n) but you're printing each number on a new line rather than returning the list. Make it better than fib(l, n)
!!endolist!!

Once you're done, call me or a VP over and we'll look it over. If it's good, you can start helping the children who need help


After we're done (cuz y'all should finish quickly) we're going to start on a problem set. Here's the link:
a[SJC Set 2017](https://www.sjcny.edu/files/images/hs-programming-problems-2017.pdf)
